"""
–§–∞–π–ª –¥–ª—è —ñ–≥–æ—Ä
"""
from random import randint

from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, types

from create_bot import bot
from states.games import Games

async def games(message: types.Message):
    """
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ /games —Ç–æ –±–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å—Ç–∞–Ω —Åhoose_game
    """
    chat_id = message.chat.id
    text =  "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É (–ø–æ –Ω–æ–º–µ—Ä—É) —â–æ–± –≤–∏–π—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å \"–í–∏–π—Ç–∏\"\n" \
            "1 - –ö–∞–º—ñ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ñ –ø–∞–ø—ñ—Ä\n" \
            "2 - –í–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
    await bot.send_message(chat_id=chat_id, text=text)
    await Games.—Åhoose_game.set()
    
    
async def choose_game(message: types.Message, state: FSMContext):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ —á–∏—Å–ª–æ —ñ –π–æ–≥–æ –ø–µ—Ä–µ–∫–∏–¥—É—î –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –≥—Ä–∏
    """
    chat_id = message.chat.id
    choose_game = message.text.lower()
    match choose_game:
        case "1":
            await bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ:\n1 - –∫–∞–º—ñ–Ω—å\n2 - –Ω–æ–∂–Ω–∏—Ü—ñ\n3 - –ø–∞–ø—ñ—Ä")
            await Games.rock_paper_scissors.set()
        case "2":
            await bot.send_message(chat_id=chat_id, text="–ß–∏—Å–ª–æ –≤—ñ–¥ -10 –¥–æ 10 –∑–∞–≥–∞–¥–∞–Ω–µ! –©–æ–± –≤–∏–π—Ç–∏ –Ω–∞—Ä–∏—à—ñ—Ç—å \"–í–∏–π—Ç–∏\"")
            await Games.guess_number.set()
        case "–≤–∏–π—Ç–∏":
            await bot.send_message(chat_id=chat_id, text="–í–∏ –≤–∏–π—à–ª–∏ –∑ –º–µ–Ω—é!")
            await state.finish()
        case _:
            await bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É —á–∏—Å–ª–æ–º –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2")


async def game_guess_number(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    message_text = message.text
    random_number = randint(-10, 10)
    try:
        int(message_text)

        if int(message_text) == random_number:
            await bot.send_message(chat_id=chat_id, text="–í–∏ –≤–≥–∞–¥–∞–ª–∏ –∑–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ!")
        else:
            await bot.send_message(chat_id=chat_id, text="–ù–µ –≤–≥–∞–¥–∞–≤!")
    except:
        if message_text.lower() == "–≤–∏–π—Ç–∏":
            await bot.send_message(chat_id=chat_id, text="–í–∏ –≤–∏–π—à–ª–∏!")
            await state.finish()
        else:
            await bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ")


async def game_rock_paper_scissors(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    message_text = message.text.lower()
    random_object = randint(1, 3)
    match message_text:
        case "–≤–∏–π—Ç–∏":
            await bot.send_message(chat_id=chat_id, text="–í–∏ –≤–∏–π—à–ª–∏ –∑ –≥—Ä–∏!")
            await state.finish()
        case _:
            try:
                int(message_text)
                await bot.send_message(chat_id=chat_id, text=game_rock_paper_scissors_work(message_text, random_object))
            except:
                await bot.send_message(chat_id=chat_id, text="–ü–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ —â–æ–± –≤–∏–π—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å \"–í–∏–π—Ç–∏\"\n"
                                                             "–í–∏–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ:\n1 - –∫–∞–º—ñ–Ω—å\n2 - –Ω–æ–∂–Ω–∏—Ü—ñ\n3 - –ø–∞–ø—ñ—Ä")


def game_rock_paper_scissors_work(message_text, random_object):
    if int(message_text) == random_object:
        return "–ù—ñ—á—ñ—è!"
    else:
        match int(message_text):
            case 1:
                match random_object:
                    case 2:
                        return "ü§ú‚úåÔ∏è\n–í–∏ –≤–∏–≥—Ä–∞–ª–∏!"
                    case _:
                        return "ü§úü´≤\n–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!"
            case 2:
                match random_object:
                    case 1:
                        return "‚úåÔ∏èü§õ\n–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!"
                    case _:
                        return "‚úåÔ∏èü´≤\n–í–∏ –≤–∏–≥—Ä–∞–ª–∏!"
            case 3:
                match random_object:
                    case 1:
                        return "ü´±ü§õ\n–í–∏ –≤–∏–≥—Ä–∞–ª–∏!"
                    case _:
                        return "ü´±‚úåÔ∏è\n–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!"
            case _:
                return "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π\n–í–∏–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ:\n1 - –∫–∞–º—ñ–Ω—å\n2 - –Ω–æ–∂–Ω–∏—Ü—ñ\n3 - –ø–∞–ø—ñ—Ä"

    
def register_handler_games(dp: Dispatcher):
    dp.register_message_handler(games, commands=["games"])
    dp.register_message_handler(choose_game, state=Games.choose_game)
    dp.register_message_handler(game_rock_paper_scissors, state=Games.rock_paper_scissors)
    dp.register_message_handler(game_guess_number, state=Games.guess_number)